package pl.sda.commons.services;

import com.itextpdf.text.*;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import pl.sda.commons.MockData;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Date;

public class PdfDocument {

    private static final String FILE = "/Users/jakubdobrogowski/Desktop/pdfFile";
    private static final Font FONT = FontFactory.getFont(FontFactory.COURIER, 11, BaseColor.BLACK);


    public static void saveToPdf(Object data) {

        Document document = new Document();

        try {
            PdfWriter.getInstance(document, new FileOutputStream(FILE));
        } catch (DocumentException e) {
            e.printStackTrace();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }

        document.open();

        try {
            addTitlePage(document);
            addContent(document, data);
        } catch (DocumentException e) {
            e.printStackTrace();
        }
        document.close();
    }


    private static void addTitlePage(Document document)
            throws DocumentException {

        Paragraph preface = new Paragraph();

        // We add one empty line
        addEmptyLine(preface, 1);

        // Lets write a big header
        preface.add(new Paragraph("Title of the document", FONT));

        addEmptyLine(preface, 1);

        // Will create: Report generated by: _name, _date
        preface.add(new Paragraph(
                "Report generated by: " + System.getProperty("user.name") + ", " + new Date(), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
                FONT));

        document.add(preface);

        // Start a new page
        document.newPage();
    }

    private static void addContent(Document document, Object data) throws DocumentException {

        Anchor anchor = new Anchor(data.getClass().getSimpleName().toUpperCase(), FONT);

        // Second parameter is the number of the chapter
        Chapter catPart = new Chapter(new Paragraph(anchor), 1);

        // add a list
        createList(catPart, data);
        Paragraph paragraph = new Paragraph();
        addEmptyLine(paragraph, 5);

        // now add all this to the document
        document.add(catPart);
    }

    private static void createList(Chapter catPart, Object data) {

        List list = new List(true, false, 10);

        Field[] fields = data.getClass().getDeclaredFields();
        for (Field field : fields) {
            field.setAccessible(true);
            try {

                //    java.util.List o = (java.util.List) ;
//                if (java.util.ArrayList.class.isAssignableFrom(field.get(field).getClass())) {
//                    createTable(catPart, field, data);
//                }

                list.add(new ListItem(field.get(data).toString()));

            } catch (IllegalAccessException e) {
                e.printStackTrace();
            }

        }
        catPart.add(list);
    }

    private static void createTable(Chapter catPart, Field field, Object type) throws IllegalAccessException {

        java.util.List list = (java.util.List) field.get(type);
       // List list = (List) type;
        PdfPTable table = new PdfPTable(list.size());

        for (int i = 0; i < list.size(); i++) {

            PdfPCell cell = new PdfPCell(new Phrase(i));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);
        }
        table.setHeaderRows(1);
        catPart.add(table);

    }

    private static void addEmptyLine(Paragraph paragraph, int number) {

        for (int i = 0; i < number; i++) {
            paragraph.add(new Paragraph(" "));
        }
    }

}
